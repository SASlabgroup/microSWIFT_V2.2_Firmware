
Lengthy list of TODOs:

****************************************************************************************************
Busses
****
- SPI1:= 	 	Core SPI bus
       		 	-> RTC
       		
- I2C1:=	 	Core I2C bus
			 	-> Light Sensor
			 	-> Turbidity
			 	-> Temperature
			
- UART4:=	 	Core UART
			 	-> Iridium
		 	
- UART5:=	 	Core UART
			 	-> CT
			
- LPUART1:=	 	Core UART
			 	-> GNSS
			
- USART6:=	 	Logger UART

- SDMMC1:= 		SD card non-volatile

- EXPANSION:= 	I2C2, I2C3, SPI2, SPI3, USART2, USART3

****************************************************************************************************
General
*******

[ ] !! Go through ALL pin and port assignments.
	[x] Ensure device_handles assignments are correct
	[ ] Ensure all port macros and non-generated functions are correct
[ ] Ensure all unrecoverable errors call Error_Handler();
[x] Ensure all interrupt handlers are covered, including default_handler
[ ] Refactor RTC alarm setting with duty cycle
[x] Make a common return code for EVERYTHING (close enough).
	[x] Ensure all functions return an uSWIFT_return_code_t
[x] !!!! Fix all timing instances of TX calls to use 
	[x] Looks like everything is good and stable, keep an eye out for more
[x] Move away from cycles per hour to duty cycle definition in configuration.h
[x] Ensure all threads disable associated interrupts prior to termination
[x] Try using the RTC as the LSE clock source.
	[x] Will require a call to enable clock out on RTC in main immediately after HAL_Init and before clock/pwr config
[x] Check static stack usage and adjust threead stack size accordingly
[x] Make generic green/red led on/off functions
    [x] Need to move the pins and use throughole LEDs for the prototype
[x] Finish implementation of watchdog
[x] Check all init calls in startup procedure to make sure bus peripheral is starting properly
[x] Figure out how to disable watchdog in debug mode
	[x] Likely just adjust the watchdog period to be very long
[x] Make sure everything sticks to the principle that there are no infinite loops
	[x] Need to insert some timers in various places, such as a timer for the full sample, process, transmit scheme
	    and initialization of sensors
[x] Ditch watchdog hour timer and all that baggage
[x] Modify linker script -- add external memory if necessary
	[x] Added section for SRAM2 and moved waves memory pool and a few other small things to RAM1
[x] Make a thread to handle UART console port comms... Will use USART 6, 115200 baud, 8N1
[ ] Ensure all possible error conditions (including interrupts, default handler, etc) will not
    result in a forever loop -- all unexpected conditions should software reset.    
    
****************************************************************************************************
Control
*******
[x] !!!!Figure out the control flow if GNSS is unable to get a fix
	[x] Light and OBS won't be able to complete their messages
	[x] Most likely just want to quit at this point...
[x] Figure out how to identify first time power on and subsequent power on.
[x] Remove all thread control and sys reset calls from threads other than control_thread
[x] Implement Error_Handler() that checks error flags and acts accordingly
	[x] This is implemented as control.monitor_and_handle_errors()
[ ] Implement subsequent power on fasttrack
	[ ] Need to make sure everything is still tested. Found a case where the light sensor ran astray
	    in a subsequent window.
[x] Consider wrapping the initialization of north, east, down arrays into mem_replacements.c and
    provide get/set functions for passing to GNSS and waves
[ ] Implement shut_it_all_down(), enter_shutdown_mode(), etc
	[ ] Ensure all modes result in soft-shutdown
[x] End of cycle now becomes setting an alarm, soft shutting down everything, and entering
    shutdown mode
[ ] Figure out how to keep the modem off during standby mode.
	[x] Will need to configure pull resistors in standby like we do with the RTC Int
	[ ] Make sure this works with both v3.D and v3.F modems

****************************************************************************************************
RTC
***
[ ] Ensure the timestamps are setup to overwrite -- this needs to be added to setup

****************************************************************************************************
GNSS
****

[x] Retain a breadcrumb track of lat/lon
[x] Make globally visible function to return current lat/lon
[x] Create some kind of signalling mechanism for Light/OBS that the GNSS sampling has started
[x] Move buffers to inside GNSS struct
	[x] Still as pointers in the struct, but the buffers live in the GNSS thread and are passed from there
[x] Give GNSS a FIFO for messages
	[x] not needed
[x] Rework DMA transfers
    [x] Circular mode shouldn't start until the linked list is set up -- remove the DMA stop/ abort
        calls early on, but test to make sure this is correct
    [x] Clean up all the functions for switching to circular
    [x] Study this: 
    https://github.com/STMicroelectronics/STM32CubeU5/tree/main/Projects/NUCLEO-U575ZI-Q/Examples/UART/UART_ReceptionToIdle_CircularDMA
    [x] The newly added linked list structure and LPDMA MX functions should work or be close to
        correct
[x] Improve GNSS config -- find a better way to identify UART idle conditions, etc
[x] Use a TX_TIMER instead of a hardware timer
[x] Generalize UART to a better degree
	[x] Only so much you can do with GNSS...
[x] Move the callback function for setting up DMA to inside gnss.c
[x] See if initialization and configuration can be improved -- there has to be a better way to
    get the config done
    [x] Just added a thing to power cycle the GNSS every 5 failed retries. We'll see if that fixes the intermittent config failure.
[x] Reorg functions and clean up comments

****************************************************************************************************
Iridium
*******

[x] Figure out message Tx scheme with the new telemetry formats
	[x] Probably some kind of round-robin deal. Remember that Light/OBS messages happen much less often and can
	    be sent AFTER the waves telemetry
[x] Move buffers to inside Iridium struct
[x] Use a TX_TIMER instead of a hardware timer
[x] Switch UART over to using a generic uart driver
[x] Reorg functions and clean up comments

****************************************************************************************************
CT
**

[ ] Add fet pin and on/off
[x] Store all samples taken in a series and pass down to file system for saving
[x] Move buffers to inside CT struct
[x] Switch over to generic UART driver

****************************************************************************************************
Temperature
************

[ ] Add fet pin and on/off
[x] Store all samples taken in a series and pass down to file system for saving
[x] Move buffers to inside Temperature struct
[x] Rework I2C and figure out how to share bus
[x] Remove FET pin and change on/off to software shutdown/idle/watever

****************************************************************************************************
Light
*****

[ ] Figure out if we are going to keep Basic Counts
	[ ] If so, need to ensure evertything is sized appropriately as current telemetry definition cannot support
[ ] Bring over changes from the light sensor test
    [ ] Update programmer tool to reflect
[x] Remove GPIO requirements -- do everything via polling on I2C
[x] Rework I2C and figure out how to share bus
[x] Track timestamps for start/stop times
[x] Figure out how to get locations for start/stop
[x] Make function for assembling telemetry message element -- store it after creation
[x] Remove FET pin and change on/off to software shutdown/idle/watever

****************************************************************************************************
OBS
***

[ ] Add fet pin and on/off
[x] Remove GPIO requirements -- do everything via polling on I2C
[x] Rework I2C and figure out how to share bus
[x] Track timestamps for start/stop times
[x] Figure out how to get locations for start/stop
[x] Make function for assembling telemetry message element -- store it after creation
[x] Remove FET pin and change on/off to software shutdown/idle/watever

****************************************************************************************************
ThreadX
*******

[x] Figure out the required main memory pool size
	[x] Currently good, but will likely need to increase size soon
[x] Find a new way to identify subsequent windows since we will go into shutdown mode after the end
    of the sample window
[x] Change all non-threadx objects to static allocation -- remove from App_ThreadX_Init()
	[x] Threads now own object that only they should modify/ control
[x] Make a control thread
    [x] Move startup and end-of-cycle thread functions inside
    [x] make event loop handler type deal to look for error flags or something
[x] Figure out how to get threads running concurrently: i.e. CT sampling while GNSS wrapping up
    [x] Should be easy with control thread
    
****************************************************************************************************
Logger
******

[ ] Figure out how to return early if not enabled/ errored
[x] Make a utility to pass all logs down to FileX
[x] Initialize in control, set the configuration flag if it is enabled
	[x] It has its own thread and event loop
[x] logger functions first check if it is enabled, if not, return immediately
[x] must run in a server style thread...

****************************************************************************************************
FileX
*****

[x] Make sure this can fail to no ill effect
[x] Add FileX thread to all things that need it
[x] Make functions to save:
	[x] All logs -- these should save as generated
	[x] All raw data
[x] Write the time to each file at creation or closeout with fx_file_date_time_set