
Lengthy list of TODOs:

****************************************************************************************************
General
****

[ ] Check static stack usage and adjust threead stack size accordingly
[ ] Make generic green/red led on/off functions
    [ ] Need to move the pins and use throughole LEDs for the prototype
[ ] Check all init calls in startup procedure to make sure bus peripheral is starting properly
[ ] Redo all GPIO bare pin calls -- FET pins, etc -- to use GPIO functions in gpio.c. Make sure to
    pass in GPIO pin/port definitions and include them in the structs.
[ ] Figure out how to disable watchdog in debug mode
[ ] Change end of cycle sleep to shutdown mode, wakeup on int <a,b> from RTC
[ ] Make sure everything sticks to the principle that there are no infinite loops
[ ] Ditch watchdog hour timer and all that baggage
[ ] Modify linker script -- add external memory if necessary
[ ] Make a thread to handle UART console port comms... Will use USART 6, 115200 baud, 8N1
[ ] Ensure all possible error conditions (including interrupts, default handler, etc) will not
    result in a forever loop -- all unexpected conditions should software reset.    
    
****************************************************************************************************
Control
****
[ ] Figure out how to identify first time power on and subsequent power on.
[ ] Implement subsequent power on fasttrack
[ ] Consider wrapping the initialization of north, east, down arrays into mem_replacements.c and
    provide get/set functions for passing to GNSS and waves

****************************************************************************************************
GNSS
****

[ ] Move buffers to inside GNSS struct
[ ] Give GNSS a FIFO for messages
[ ] Rework DMA transfers
    [ ] Circular mode shouldn't start until the linked list is set up -- remove the DMA stop/ abort
        calls early on, but test to make sure this is correct
    [ ] Clean up all the functions for switching to circular
    [ ] Study this: 
    https://github.com/STMicroelectronics/STM32CubeU5/tree/main/Projects/NUCLEO-U575ZI-Q/Examples/UART/UART_ReceptionToIdle_CircularDMA
    [ ] The newly added linked list structure and LPDMA MX functions should work or be close to
        correct
[ ] Generalize UART to a better degree
[ ] Move the callback function for setting up DMA to inside gnss.c
[ ] See if initialization and configuration can be improved -- there has to be a better way to
    get the config done
[ ] Reorg functions and clean up comments

****************************************************************************************************
Iridium
****

[ ] Move buffers to inside Iridium struct
[ ] Switch UART over to using a generic uart driver
[ ] Reorg functions and clean up comments

****************************************************************************************************
CT
****

[ ] Move buffers to inside CT struct
[ ] Switch over to generic UART driver

****************************************************************************************************
Termperature
****

[ ] Move buffers to inside Temperature struct

****************************************************************************************************
ThreadX
****

[ ] Figure out the required main memory pool size
[ ] Find a new way to identify subsequent windows since we will go into shutdown mode after the end
    of the sample window
[ ] Change all non-threadx objects to static allocation -- remove from App_ThreadX_Init()
[ ] Make a control thread
    [ ] Move startup and end-of-cycle thread functions inside
    [ ] make event loop handler type deal to look for error flags or something
[ ] Fill out Tx low power functions and see if things work with Stop1 mode
    [ ] Non-critical, if it makes everything fall apart, ditch it
[ ] Figure out how to get threads running concurrently: i.e. CT sampling while GNSS wrapping up
    [ ] Should be easy with control thread
    
****************************************************************************************************
Logger
****

[ ] Initialize in control, set the configuration flag if it is enabled
[ ] logger functions first check if it is enabled, if not, return immediately
[ ] must run in a server style thread...